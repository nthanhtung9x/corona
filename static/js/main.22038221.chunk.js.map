{"version":3,"sources":["images/menu.svg","images/arrow.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","changeData","list","item","arr","Object","keys","map","key","setState","national","name","hiddenMenu","state","onChange","event","value","target","keyword","displayMenu","axios","get","then","res","data","catch","err","console","log","this","result","index","className","onClick","src","arrow","alt","result2","date","confirmed","deaths","recovered","total","slice","toLowerCase","indexOf","htmlFor","menu","id","type","hidden","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.22038221.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu.bcc98b5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.a261e3e5.svg\";","import React, { Component } from 'react';\nimport './scss/app.scss';\nimport arrow from './images/arrow.svg';\nimport menu from './images/menu.svg';\n\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      list:[],\n      national:[],\n      name:'Infomation',\n      keyword:'',\n      hiddenMenu:false \n    }\n  }\n\n  componentDidMount() {\n    axios.get('https://pomber.github.io/covid19/timeseries.json').then(res => {\n      this.setState({\n        list: res.data\n      })\n    }).catch(err => {\n      console.log(err);\n    })\n  };\n\n  changeData = (list,item) => {\n    let arr = Object.keys(list).map(key => {\n      return list[key];\n    });\n    this.setState({\n      national: arr,\n      name: item,\n      hiddenMenu:!this.state.hiddenMenu\n    })\n  };\n\n  onChange = (event) => {\n    let value = event.target.value;\n    this.setState({\n      keyword:value\n    })\n  };\n\n  displayMenu = () => {\n    this.setState({\n      keyword:'',\n      hiddenMenu:!this.state.hiddenMenu\n    })\n  }\n \n  render(){\n    let { list, national,name,keyword } = this.state;\n\n    //show list\n    let result = Object.keys(list).map((item, index) => {\n      return  <li className=\"item\" key={index} onClick={() => this.changeData(list[item],item)}>\n                <button className=\"btn\">\n                  <img src={arrow} alt=\"\"></img>\n                  {item}\n                </button>\n              </li>\n    });\n    \n    //show table\n    let result2 = national.map((item,index) => {\n      return <tr key={index}>\n              <td>{item.date}</td>\n              <td>{item.confirmed}</td>\n              <td>{item.deaths}</td>\n              <td>{item.recovered}</td>\n            </tr>\n    });\n\n    //total\n    let total = national.slice(-1).map((item, index) => {\n      return <div className=\"infomation\" key={index}>\n              <span className=\"infomation__text\">Số ca nhiễm:&nbsp;\n                { item.confirmed }\n              </span>\n              <span className=\"infomation__text\">Số ca tử vong: &nbsp;\n              { item.deaths }\n              </span>\n              <span className=\"infomation__text\">Số ca phục hồi: &nbsp;\n              { item.recovered }\n              </span>\n            </div>\n    });\n    //search \n    result = Object.keys(list).map((key, index) => {\n      if(key.toLowerCase().indexOf(keyword.toLowerCase()) !== -1){\n        return  <li className=\"item\" key={index} onClick={() => this.changeData(list[key],key)}>\n                  <button className=\"btn\">\n                    <img src={arrow} alt=\"\"></img>\n                    {key}\n                  </button>\n                </li>\n      }\n    });\n    \n    return (\n      <div className=\"wrapper\">\n        <div className=\"wide\">\n          <label htmlFor=\"collapse\" className=\"menu\" onClick={this.displayMenu}>\n            <img src={menu} alt=\"\"></img>\n          </label>\n          <input id=\"collapse\" type=\"checkbox\" hidden></input>\n          <div className={this.state.hiddenMenu ? 'menu__wrapper' : 'hiddenMenu'}>\n            <input className=\"searchInput\" placeholder=\"Nhập quốc gia\" value={keyword} onChange={this.onChange}></input>\n            <ul className=\"list\">\n              { result }\n            </ul>\n          </div>\n          <article className=\"heading\">Data Corona</article>\n  \n          <div className=\"row\">\n            <div className=\"col l-3\">\n              <input className=\"searchInput\" placeholder=\"Nhập quốc gia\" value={keyword} onChange={this.onChange}></input>\n              <ul className=\"list\">\n                { result }\n              </ul>\n            </div>\n            <div className=\"col l-9\">\n              <div className=\"data\">\n                  <article className=\"national__heading\">{name}</article>\n                  <div className=\"table__wrapper\">\n                    <table>\n                      <thead>\n                        <tr>\n                          <th>Time</th>\n                          <th>Confirmed</th>\n                          <th>Deaths</th>\n                          <th>Recovered</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        { result2 }\n                      </tbody>\n                    </table>\n                  </div>\n                   {/* total */}\n                    {total}\n                  \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}